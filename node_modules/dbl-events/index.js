/***
  Events
  ****/
  var eventSplitter = /^(\S+)\s*(.*)$/,
   __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
  window.__dblEvents_20160101__ =  window.__dblEvents_20160101__ || {}; 
  var calls = window.__dblEvents_20160101__;
  var Events = {
    on: function(ev, callback) {
      var evs, name, _i, _len;
      evs = ev.split(' ');
      var _calls = calls._callbacks || (calls._callbacks = {});
      for (_i = 0, _len = evs.length; _i < _len; _i++) {
        name = evs[_i];
        _calls[name] || (_calls[name] = []);
        _calls[name].push(callback);
      }
      return this;
    },
    one: function(ev, callback) {
      return this.on(ev, function() {
        this.un(ev, arguments.callee);
        return callback.apply(this, arguments);
      });
    },
    emit: function() {
      var args, callback, ev, list, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ev = args.shift();
      list = (_ref = calls._callbacks) != null ? _ref[ev] : void 0;
      if (!list) {
        return;
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        callback = list[_i];
        if (callback.apply(this, args) === false) {
          break;
        }
      }
      return true;
    },
    un: function(ev, callback) {
      var cb, i, list, _i, _len, _ref;
      if (!ev) {
        this._callbacks = {};
        return this;
      }
      list = (_ref = calls._callbacks) != null ? _ref[ev] : void 0;
      if (!list) {
        return this;
      }
      if (!callback) {
        delete calls._callbacks[ev];
        return this;
      }
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        cb = list[i];
        if (!(cb === callback)) {
          continue;
        }
        list = list.slice();
        list.splice(i, 1);
        calls._callbacks[ev] = list;
        break;
      }
      return this;
    }
  };

  module.exports = Events;